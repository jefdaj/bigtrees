Create and manipulate hash trees representing collections of files.

Usage:
  bigtrees version
  bigtrees [-v] info PATH
  bigtrees [-v] hash PATH [--excludes-from EFILE] [--output OUTFILE]
  bigtrees [-v] diff OLD NEW [--output OUTFILE]
  bigtrees [-v] dupes HASHES [--output OUTFILE] [--max-depth N]
  bigtrees [-v] set-add --set SET [--note NOTE] PATH...
  bigtrees [-v] find PATH [--search-regex REGEX [--search-label LABEL] | --searches-from SFILE] [--min-files N] [--max-files N] [--min-size N] [--max-size N] [--min-modtime N] [--max-modtime N] [--min-depth N] [--max-depth N] [--types TYPES] [--output OUTFILE] [--out-fmt FORMAT]

Commands:
  hash       Reads files + folders and prints/saves their hashes + metadata.
  info       Succinct summary of a .bigtree file: stats, etc
  find       Print full paths from .bigtree file(s), and optionally filter them
  diff       Print changes in NEW relative to OLD. TODO take hashes here too!

Options:

  -v, --verbose          Print error messages rather than only writing them to .bigtree files.

  --excludes-from EFILE  Read a list of regexes and exclude any files matching it.
                         TODO rename to reflect that it's also regexes.

  --output OUTFILE       Stream output to a file rather than stdout.

  --out-fmt FORMAT       Optional tab-separated metadata fields to print at the
                         beginning of each line. Options are: "h" (hash),
                         "t" (type), "d" (depth). Example: "ht".
                         TODO add the other current options
                         TODO rename -p --print ?
                         TODO add regex search labels here
                         TODO caps should also work

  --search-regex REGEX   Single regular expression to test filtering.
  --search-label LABEL   Single label to test --out-fmt printing. Output is tab separated,
                         so spaces are fine here. [default: unlabeled]
  --searches-from SFILE  Load a map of search labels -> regexes. (TODO explain format)

  --set SET              Bigset to operate on.
  --note NOTE            Replace all hashset notes with the given string.

  --min-files N          Find nodes containing at least N files.
  --max-files N          Find nodes containing at most N files.

  --min-size N           Find nodes containing at least N bytes       (TODO parse human readable)
  --max-size N           Find nodes containing at most N bytes        (TODO parse human readable)

  --min-modtime N        Find nodes modified on or after unix time N  (TODO parse human readable)
  --max-modtime N        Find nodes modified on or before unix time N (TODO parse human readable)

  --min-depth N          Look only at nodes at least N levels deep in the folder structure.
  --max-depth N          Look for dupes only up to N levels into the folder structure.
                         Drastically reduces time and memory use when deduping,
                         without affecting accuracy up to the max depth.
                         WARNING: only works on a saved hashes file. No effect
                         when reading a tree of files and deduping them at the
                         same time.

  --types TYPES          Find nodes of the specified tree type(s). Examples: "DFL" or "BE".
                         Options are: D=Dir, F=File, L=Symlink (with content in tree),
                         B=Symlink ("broken", or potentially broken by pointing outside tree),
                         E=Error during scan.
